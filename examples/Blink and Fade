/*
 * Include the standard HeliOS header for Arduino sketches. This header
 * includes the required HeliOS header files automatically.
 */
#include <HeliOS_Arduino.h>

/*
 * Declare and initialize an int to maintain the state of
 * the built-in LED.
 */
volatile int ledState = 0;
volatile int fadeState = 0;

/*
 * The task definition for taskBlink() which will
 * be executed by HeliOS every 1,000,000 microseconds
 * (1 second).
 */
void taskBlink(int id_) {

  /*
   * If the state is 0 or LOW then set the state to
   * 1 or HIGH. Likewise, if the state is 1 or HIGH
   * then set the state to LOW.
   */
  if(ledState) {

    /*
     * Set the state of the digital GPIO pin associated
     * with the built-in LED to LOW.
     */
    digitalWrite(LED_BUILTIN, LOW);

    /*
     * Update the int containing the state of the build-in
     * LED accordingly.
     */
    ledState = 0;
  } else {

    /*
     * Set the state of the digital GPIO pin associated
     * with the built-in LED to HIGH.
     */
    digitalWrite(LED_BUILTIN, HIGH);

    /*
     * Update the int containing the state of the built-in
     * LED accordingly.
     */
    ledState = 1;
  }
}

/*
 * The task definition for taskFade() which will
 * be executed by HeliOS every 1,000,000 microseconds
 * (1 second).
 */
void taskFade(int d_) {

  /*
   * If the state is 0 or LED brightness is DECREASED then set the state to
   * 1 to INCREASE LED brightness. Likewise, if the state is 1 or DECREASED
   * then set the state to LOW.
   */
  if(fadeState) {

    /*
     * Set the state of the digital GPIO pin associated
     * with the designated LED to increase LED brightness.
     */
    for (int i=0; i<1023; i++){

    analogWrite( 12, i );

      }

    /*
     * Update the int containing the state of the designated pin number of the
     * LED accordingly.
     */
    fadeState = 0;
  } else {

    /*
     * Set the state of the digital GPIO pin associated
     * with the designated  LED to decrease LED brightness.
     */
    for (int i=1023; i>0; i--){
     
      analogWrite( 12, i );

   }

    /*
     * Update the int containing the state of the designated pin number of the
     * LED accordingly.
     */
    fadeState = 1;
  }
}




void setup() {

  /*
   * Declare and initialize an int to hold the
   * task id.
   */
  int id = 0;
  int d = 0;

  /*
   * Call xHeliOSSetup() to initialize HeliOS and
   * its data structures. xHeliOSSetup() must be
   * called before any other HeliOS function call.
   */
  xHeliOSSetup();

  /*
   * Set the mode of the digital GPIO pin associated
   * with the built-in LED to OUTPUT only.
   */
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(12, OUTPUT);

  /*
   * Add the task taskBlink() to HeliOS by passing
   * xTaskAdd() the friendly name of the task as well
   * as a callback pointer to the task function.
   */
  id = xTaskAdd("TASKBLINK", &taskBlink);
   d = xTaskAdd("TASKFADE", &taskFade);

  /*
   * Call xTaskWait() to place taskBlink() into a wait
   * state by passing xTaskWait() the task id. A task
   * must be in a wait state to respond to timer events.
   */
  xTaskWait(id);
  xTaskWait(d);

  /*
   * Set the timer interval for taskBlink() to 1,000,000 microseconds
   * (1 second). HeliOS automatically begins incrementing
   * the timer for the task once the timer interval is set.
   */
  xTaskSetTimer(id, 1000000);
  xTaskSetTimer(d, 1000000);
}

void loop() {

  /*
   * Momentarily pass control to HeliOS by calling the
   * xHeliOSLoop() function call. xHeliOSLoop() should be
   * the only code inside of the sketch's loop() function.
   */
   xHeliOSLoop();
}
